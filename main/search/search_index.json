{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Start Requirements In order to have aeproject working you must have installed the following: nodejs >= 14 docker Note: on windows WSL 2 must be used Install npm install -g @aeternity/aeproject Init a project aeproject init [folder] This will create the project scaffold with an example contract including tests as well as a sample deployment script inside the specified folder. If no folder is specified the artifacts will be initialized in the current directory. Further explained in Initialization Documentation . Running a local environment aeproject env This will run a local aeternity network in dev-mode (node, compiler and nginx-proxy). To stop an already spawned local environment use aeproject env --stop Further explained in Environment Documentation . Testing aeproject test This will run the tests located in ./test folder. Further explained in Testing Documentation . Help aeproject help Run this command to give you all possible commands of aeproject with help and info Version aeproject --version Running this command will give you the current installed aeproject version","title":"Quick Start"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#requirements","text":"In order to have aeproject working you must have installed the following: nodejs >= 14 docker Note: on windows WSL 2 must be used","title":"Requirements"},{"location":"#install","text":"npm install -g @aeternity/aeproject","title":"Install"},{"location":"#init-a-project","text":"aeproject init [folder] This will create the project scaffold with an example contract including tests as well as a sample deployment script inside the specified folder. If no folder is specified the artifacts will be initialized in the current directory. Further explained in Initialization Documentation .","title":"Init a project"},{"location":"#running-a-local-environment","text":"aeproject env This will run a local aeternity network in dev-mode (node, compiler and nginx-proxy). To stop an already spawned local environment use aeproject env --stop Further explained in Environment Documentation .","title":"Running a local environment"},{"location":"#testing","text":"aeproject test This will run the tests located in ./test folder. Further explained in Testing Documentation .","title":"Testing"},{"location":"#help","text":"aeproject help Run this command to give you all possible commands of aeproject with help and info","title":"Help"},{"location":"#version","text":"aeproject --version Running this command will give you the current installed aeproject version","title":"Version"},{"location":"migration-from-3.x.x-to-4.x.x/","text":"Migrate from 3.x.x to 4.x.x Migration of aeproject 3.x.x projects AEproject v4.0.0 underwent some bigger changes, is now available as official package of the aeternity organization on NPM and is compatible to the recently published node v6.3.0 . Install the new AEproject version npm install -g @aeternity/aeproject Removed commands Following commands have been removed and cannot be used anymore. Most of them didn't work properly or aren't used by anyone: aeproject compatibility (discontinued) aeproject compile manual compilation isn't needed for use of aeproject, alternatively use aecli or the sdk programmatically aeproject deploy deployment isn't supported in aeproject anymore, alternatively use aecli or the sdk programmatically aeproject export (discontinued) aeproject tx-inspector manual tx inspection is moved to aecli Changed commands aeproject init added the folder argument to create a new folder for the project initialization Important changes in the project structure The latest available node and compiler will always be used with starting the testing environment. Testing is now handled locally in the project using mocha and chai as direct dev dependencies. @aeternity/aeproject is added itself as dependency and includes some library-functions that can be used in testing. const { networks, utils, wallets } = require('@aeternity/aeproject'); networks includes network definitions for local development, testnet and mainnet wallets includes example wallets that are prefunded in local development utils includes helper functions for testing getFilesystem(source) to get the filesystem definition for a given contract for deployment getClient() get a default client for local development initialized with all prefunded wallets for onAccount to be used calling from different accounts awaitKeyBlocks(client, number) await a certain number of key-blocks createSnapshot(client) create a snapshot for local testing rollbackSnapshot(client) rollback to previously created snapshot in local testing Migration of old projects Upgrade your project aeproject init --update adds new files needed including new example contract and tests prompts for files to replaced docker setup for the node, compiler dev-mode setup should be accepted example contract and example tests should not be accepted if used in your project for testing automatically installs needed dependencies and removes unnecessary ones Adapt Testing Setup (compare your tests with test/exampleTest.js ) to include const { assert } = require('chai'); for assertions replace NETWORKS import with const { networks } = require('@aeternity/aeproject'); for networks definition local testing network is now devmode instead of local replace defaultWallets import with const { wallets } = require('@aeternity/aeproject'); for prefunded wallets replace contractUtils import with const { utils } = require('@aeternity/aeproject'); for utils consider using the new helpers for getting a client and creating snapshots similar to test/exampleTest.js","title":"Migrate from 3.x.x to 4.x.x"},{"location":"migration-from-3.x.x-to-4.x.x/#migrate-from-3xx-to-4xx","text":"","title":"Migrate from 3.x.x to 4.x.x"},{"location":"migration-from-3.x.x-to-4.x.x/#migration-of-aeproject-3xx-projects","text":"AEproject v4.0.0 underwent some bigger changes, is now available as official package of the aeternity organization on NPM and is compatible to the recently published node v6.3.0 . Install the new AEproject version npm install -g @aeternity/aeproject","title":"Migration of aeproject 3.x.x projects"},{"location":"migration-from-3.x.x-to-4.x.x/#removed-commands","text":"Following commands have been removed and cannot be used anymore. Most of them didn't work properly or aren't used by anyone: aeproject compatibility (discontinued) aeproject compile manual compilation isn't needed for use of aeproject, alternatively use aecli or the sdk programmatically aeproject deploy deployment isn't supported in aeproject anymore, alternatively use aecli or the sdk programmatically aeproject export (discontinued) aeproject tx-inspector manual tx inspection is moved to aecli","title":"Removed commands"},{"location":"migration-from-3.x.x-to-4.x.x/#changed-commands","text":"aeproject init added the folder argument to create a new folder for the project initialization","title":"Changed commands"},{"location":"migration-from-3.x.x-to-4.x.x/#important-changes-in-the-project-structure","text":"The latest available node and compiler will always be used with starting the testing environment. Testing is now handled locally in the project using mocha and chai as direct dev dependencies. @aeternity/aeproject is added itself as dependency and includes some library-functions that can be used in testing. const { networks, utils, wallets } = require('@aeternity/aeproject'); networks includes network definitions for local development, testnet and mainnet wallets includes example wallets that are prefunded in local development utils includes helper functions for testing getFilesystem(source) to get the filesystem definition for a given contract for deployment getClient() get a default client for local development initialized with all prefunded wallets for onAccount to be used calling from different accounts awaitKeyBlocks(client, number) await a certain number of key-blocks createSnapshot(client) create a snapshot for local testing rollbackSnapshot(client) rollback to previously created snapshot in local testing","title":"Important changes in the project structure"},{"location":"migration-from-3.x.x-to-4.x.x/#migration-of-old-projects","text":"Upgrade your project aeproject init --update adds new files needed including new example contract and tests prompts for files to replaced docker setup for the node, compiler dev-mode setup should be accepted example contract and example tests should not be accepted if used in your project for testing automatically installs needed dependencies and removes unnecessary ones Adapt Testing Setup (compare your tests with test/exampleTest.js ) to include const { assert } = require('chai'); for assertions replace NETWORKS import with const { networks } = require('@aeternity/aeproject'); for networks definition local testing network is now devmode instead of local replace defaultWallets import with const { wallets } = require('@aeternity/aeproject'); for prefunded wallets replace contractUtils import with const { utils } = require('@aeternity/aeproject'); for utils consider using the new helpers for getting a client and creating snapshots similar to test/exampleTest.js","title":"Migration of old projects"},{"location":"cli/env/","text":"Start local testing environment aeproject env The command is responsible for setting up a healthy local environment. The env command helps developers run a local node and a local compiler in dev-mode using docker. To spawn a fully functional environment takes a couple of minutes. If using Windows, WSL 2 needs to be used for aeproject to work normally, see https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers You can stop both the node and the compiler by running aeproject env --stop There are optional parameters --nodeVersion and --compilerVersion . To specify a specific version of node or compiler, or both aeproject env --nodeVersion v6.3.0 # or aeproject env --compilerVersion v6.1.0 # or aeproject env --nodeVersion v6.3.0 --compilerVersion v6.1.0 also applies to aeproject node and aeproject compiler To see whether you have running instances of the nodes along with a compiler you could run the following command aeproject env --info Disclaimer Firewalls and any other security feature can block your docker/docker-compose requests. Please check that docker/docker-compose is NOT in its blocked list or has permission to make requests.","title":"Start local testing environment"},{"location":"cli/env/#start-local-testing-environment","text":"aeproject env The command is responsible for setting up a healthy local environment. The env command helps developers run a local node and a local compiler in dev-mode using docker. To spawn a fully functional environment takes a couple of minutes. If using Windows, WSL 2 needs to be used for aeproject to work normally, see https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers You can stop both the node and the compiler by running aeproject env --stop There are optional parameters --nodeVersion and --compilerVersion . To specify a specific version of node or compiler, or both aeproject env --nodeVersion v6.3.0 # or aeproject env --compilerVersion v6.1.0 # or aeproject env --nodeVersion v6.3.0 --compilerVersion v6.1.0 also applies to aeproject node and aeproject compiler To see whether you have running instances of the nodes along with a compiler you could run the following command aeproject env --info","title":"Start local testing environment"},{"location":"cli/env/#disclaimer","text":"Firewalls and any other security feature can block your docker/docker-compose requests. Please check that docker/docker-compose is NOT in its blocked list or has permission to make requests.","title":"Disclaimer"},{"location":"cli/init/","text":"Initialize a new project aeproject init [folder] Optionally a folder can be specified for the project to be initialized in, otherwise the current directory is used. Creates a new project structure with a few folders in which the developer can create contracts and tests , as well as installing needed dependencies. Update existing project For upgrade from old aeproject versions check the documentation to Migrate from 3.x.x to 4.x.x . aeproject init --update Updated the project structure and needed artifacts to the latest version, as well as installing needed dependencies.","title":"Initialize a new project"},{"location":"cli/init/#initialize-a-new-project","text":"aeproject init [folder] Optionally a folder can be specified for the project to be initialized in, otherwise the current directory is used. Creates a new project structure with a few folders in which the developer can create contracts and tests , as well as installing needed dependencies.","title":"Initialize a new project"},{"location":"cli/init/#update-existing-project","text":"For upgrade from old aeproject versions check the documentation to Migrate from 3.x.x to 4.x.x . aeproject init --update Updated the project structure and needed artifacts to the latest version, as well as installing needed dependencies.","title":"Update existing project"},{"location":"cli/test/","text":"Unit Testing Run unit tests aeproject test The test command helps developers run their unit tests for aeternity projects. The command executes the tests scripts that are located in the test folder of your aeternity project. Implement unit tests In the test/exampleTest.js file you can find an example for unit testing using aeproject. 1. Dependencies const { assert } = require('chai'); Javascript testing framework used with mocha for assertions, documented at https://www.chaijs.com/api/assert/ const { networks, utils, wallets } = require('@aeternity/aeproject'); Helper and utilities for aeproject use, e.g. prefunded wallets, network definition and utility functions for client initialization and snapshotting. 2. Client and Snapshotting Setup before(...) used in mocha for initializations needed to be done once before all tests client = await utils.getClient(); use included utils to initialize default aeternity client const filesystem = utils.getFilesystem(EXAMPLE_CONTRACT_SOURCE); use utils to get filesystem definition for given contract const source = utils.getContractContent(EXAMPLE_CONTRACT_SOURCE); read contract source from filesystem contract = await client.getContractInstance({ source, filesystem }); initialize contract instance with client await contract.deploy(); deploy initialized contract await utils.createSnapshot(client); create snapshot once before all tests, so we can rollback to a clean state after each test afterEach ( async () => { await utils . rollbackSnapshot ( client ); }); after each test use the util to rollback to previously created snapshot for a clean state in the following tests 3. Example Test it ( 'ExampleContract: set and get' , async () => { const set = await contract . methods . set ( 42 , { onAccount : wallets [ 1 ]. publicKey }); assert . equal ( set . decodedEvents [ 0 ]. name , 'SetXEvent' ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 0 ], wallets [ 1 ]. publicKey ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 1 ], 42 ); const { decodedResult } = await contract . methods . get (); assert . equal ( decodedResult , 42 ); }); use mocha for test setup and chai for assert . Then implement contract usage using the aeternity sdk as explained in the guide at https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/guides/contracts.md#5-call-contract-entrypoints","title":"Unit Testing"},{"location":"cli/test/#unit-testing","text":"","title":"Unit Testing"},{"location":"cli/test/#run-unit-tests","text":"aeproject test The test command helps developers run their unit tests for aeternity projects. The command executes the tests scripts that are located in the test folder of your aeternity project.","title":"Run unit tests"},{"location":"cli/test/#implement-unit-tests","text":"In the test/exampleTest.js file you can find an example for unit testing using aeproject.","title":"Implement unit tests"},{"location":"cli/test/#1-dependencies","text":"const { assert } = require('chai'); Javascript testing framework used with mocha for assertions, documented at https://www.chaijs.com/api/assert/ const { networks, utils, wallets } = require('@aeternity/aeproject'); Helper and utilities for aeproject use, e.g. prefunded wallets, network definition and utility functions for client initialization and snapshotting.","title":"1. Dependencies"},{"location":"cli/test/#2-client-and-snapshotting-setup","text":"before(...) used in mocha for initializations needed to be done once before all tests client = await utils.getClient(); use included utils to initialize default aeternity client const filesystem = utils.getFilesystem(EXAMPLE_CONTRACT_SOURCE); use utils to get filesystem definition for given contract const source = utils.getContractContent(EXAMPLE_CONTRACT_SOURCE); read contract source from filesystem contract = await client.getContractInstance({ source, filesystem }); initialize contract instance with client await contract.deploy(); deploy initialized contract await utils.createSnapshot(client); create snapshot once before all tests, so we can rollback to a clean state after each test afterEach ( async () => { await utils . rollbackSnapshot ( client ); }); after each test use the util to rollback to previously created snapshot for a clean state in the following tests","title":"2. Client and Snapshotting Setup"},{"location":"cli/test/#3-example-test","text":"it ( 'ExampleContract: set and get' , async () => { const set = await contract . methods . set ( 42 , { onAccount : wallets [ 1 ]. publicKey }); assert . equal ( set . decodedEvents [ 0 ]. name , 'SetXEvent' ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 0 ], wallets [ 1 ]. publicKey ); assert . equal ( set . decodedEvents [ 0 ]. decoded [ 1 ], 42 ); const { decodedResult } = await contract . methods . get (); assert . equal ( decodedResult , 42 ); }); use mocha for test setup and chai for assert . Then implement contract usage using the aeternity sdk as explained in the guide at https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/guides/contracts.md#5-call-contract-entrypoints","title":"3. Example Test"}]}